using PyPlot

function trapezoidal(f,a,b,N)
	dx = (b-a)/N
	x_range = [a+i*dx for i in 0:N]
    L = length(f(a))
	sum = [0. for i in 1:L]
	for k in 2:N+1
		sum .+= (f(x_range[k-1])+f(x_range[k]))/2*dx
	end
	return sum
end

function test1(x)
    return cos(200*x)
end

function test2(z::Complex{Int64})
    return cos(z)/z
end

function test2_alt(Ï•)
    return 
end

function test3(x)
    return [1,x,x^2,x^3]
end

function test4(x)
    return x*exp(x)
end

Ns = [50,100,200,500,1000,2000,5000]
Vs_1 = [trapezoidal(test1,0,1,Ns[i]) for i in 1:7]
Vs_3 = [[trapezoidal(test3,0,2,Ns[i])[j] for i in 1:7] for j in 1:4]
Vs_4 = [trapezoidal(test4,-1,2,Ns[i]) for i in 1:7]

PyPlot.scatter(Ns,Vs_1, label = "Trapezoidal value for N steps")
PyPlot.xscale("log")
PyPlot.grid()
PyPlot.legend()
PyPlot.title("1st test function")
PyPlot.xlabel(L"N")
PyPlot.ylabel(L"y")
PyPlot.savefig("Test_function_1.pdf")
PyPlot.close()

for j in 1:4
    PyPlot.scatter(Ns,Vs_3[j], label = string(j)*"-th component")
end
PyPlot.xscale("log")
PyPlot.grid()
PyPlot.legend()
PyPlot.title("2nd test function")
PyPlot.xlabel(L"N")
PyPlot.ylabel(L"y")
PyPlot.savefig("Test_function_3.pdf")
PyPlot.close()

PyPlot.scatter(Ns,Vs_4, label = "Trapezoidal value for N steps")
PyPlot.xscale("log")
PyPlot.grid()
PyPlot.legend()
PyPlot.title("4th test function")
PyPlot.xlabel(L"N")
PyPlot.ylabel(L"y")
PyPlot.savefig("Test_function_4.pdf")
PyPlot.close()